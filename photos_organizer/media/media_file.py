
import os

from geopy.geocoders import Nominatim 
from PIL import Image, ExifTags


class MediaFile:

    def __init__(self, file_path, full_file_name):

        self.file_path = file_path
        self.full_file_name = full_file_name
        self.location_data = {}
        self.exif_data = {}

    def get_exif_data_with_human_readable_names(self):
        """
        If the filetype is a 'photo' it will use the
        pillow library and extract the exif metadata
        also the raw exif metadata contains numerical
        IDS as the keys, so this function translates
        those IDS into a human readable dictionary keys
        by using the ExifTags fom pillow library
        """

        with Image.open(self.file_path) as img:
            exif_data = img._getexif()
            if exif_data:
                # Replaces numeric IDs with correct EXIF parameters
                exif = { ExifTags.TAGS[k]: v for k, v in exif_data.items() if k in ExifTags.TAGS }
                self.exif_data = exif
                return exif

            return exif_data

    def is_gps_info_available(self):
        """
        Returns True or False depending if
        the exif metadata contains GPS information
        """

        if self.exif_data and 'GPSInfo' in self.exif_data.keys():
            return True
        else:
            return False


    def __get_gps_data(self):
        """
        Creates and returns a dictionary with only
        the GPS information that is contained
        in the exif metadata of the photo
        """

        gps_info = {}
        for key in self.exif_data['GPSInfo']:
            decode = ExifTags.GPSTAGS.get(key, key)
            gps_info[decode] = self.exif_data['GPSInfo'][key]

        return gps_info


    def __convert_to_degrees(self, value):
        """
        GPS information is given in a tuple format 
        (degrees, minutes, seconds), this function
        returns it in a single numerical digit as
        a longitude or latitude
        """

        return value[0] + (value[1] / 60.0) + (value[2] / 3600.0)



    def get_location_data(self):
        """
        If uses the latitude and longitude generated by
        using the gps information from the exif metadata
        and using third party library 'geopy' will return
        information about the physical location in raw format
        or empty dictionary if the result is None
        """

        if self.is_gps_info_available():
            gps_info = self.__get_gps_data()
            if len(gps_info) > 0:
                geolocator = Nominatim(user_agent="myapp")
                latitude = self.__convert_to_degrees(gps_info['GPSLatitude'])
                longitude = self.__convert_to_degrees(gps_info['GPSLongitude'])
                location_data = geolocator.reverse(str(latitude) + ', ' + str(longitude))
                self.location_data = location_data.raw if location_data is not None else {}
            return location_data.raw if location_data is not None else {}
        else:
            return {}



    def __str__(self):
        
        return (
            f"File path: {self.file_path}\n"
            f"GPS info available: {self.is_gps_info_available()}\n"
            f"Location city: {self.location_data.get('address', {}).get('city', "N/A")}\n"
            f"Location town: {self.location_data.get('address', {}).get('town', "N/A")}\n"
            f"Location village: {self.location_data.get('address', {}).get('village', "N/A")}\n"
            f"Extra location details: {self.location_data}\n\n\n"

        )